{"version":3,"sources":["../src/noiseGate/workletUtil.ts","../src/noiseGate/workletNode.ts","../node_modules/.pnpm/wasm-feature-detect@1.6.1/node_modules/wasm-feature-detect/dist/esm/index.js","../src/utils/fetchArrayBuffer.ts","../src/rnnoise/load.ts","../src/rnnoise/workletUtil.ts","../src/rnnoise/workletNode.ts","../src/speex/load.ts","../src/speex/workletUtil.ts","../src/speex/workletNode.ts"],"sourcesContent":["import type { TypedAudioWorkletOptions } from '../utils/TypedAudioWorklet'\nimport type { NoiseGateProcessorOptions } from './options'\n\nexport const id = '@sapphi-red/web-noise-suppressor/noise-gate'\n\nexport type NoiseGateWorkletOptions = TypedAudioWorkletOptions<\n  Required<NoiseGateProcessorOptions>\n>\n","import type { NoiseGateProcessorOptions } from './options'\nimport { id, type NoiseGateWorkletOptions } from './workletUtil'\n\nexport class NoiseGateWorkletNode extends AudioWorkletNode {\n  constructor(\n    context: AudioContext,\n    {\n      openThreshold,\n      closeThreshold = openThreshold,\n      holdMs,\n      maxChannels\n    }: Readonly<NoiseGateProcessorOptions>\n  ) {\n    const workletOptions: NoiseGateWorkletOptions = {\n      processorOptions: { openThreshold, closeThreshold, holdMs, maxChannels }\n    }\n    super(context, id, workletOptions)\n  }\n}\n","export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jspi=()=>(async()=>\"Suspender\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)();\n","export const fetchArrayBuffer = async (url: string, init?: RequestInit) => {\n  const res = await fetch(url, init)\n  const result = await res.arrayBuffer()\n  return result\n}\n","import { simd } from 'wasm-feature-detect'\nimport { fetchArrayBuffer } from '../utils/fetchArrayBuffer'\n\ntype LoadRnnoiseOptions = {\n  /**\n   * url to regular wasm binary\n   */\n  url: string\n  /**\n   * url to simd wasm binary\n   */\n  simdUrl: string\n}\n\nexport const loadRnnoise = async (\n  { url, simdUrl }: LoadRnnoiseOptions,\n  init?: RequestInit\n) => {\n  const loadUrl = (await simd()) ? simdUrl : url\n  const binary = await fetchArrayBuffer(loadUrl, init)\n  return binary\n}\n","import type { TypedAudioWorkletOptions } from '../utils/TypedAudioWorklet'\nimport type { RnnoiseProcessorOptions } from './options'\n\nexport const id = '@sapphi-red/web-noise-suppressor/rnnoise'\n\nexport type RnnoiseWorkletOptions =\n  TypedAudioWorkletOptions<RnnoiseProcessorOptions>\n","import type { RnnoiseProcessorOptions } from './options'\nimport { id, type RnnoiseWorkletOptions } from './workletUtil'\n\n/**\n * Assumes sample rate to be 48kHz.\n */\nexport class RnnoiseWorkletNode extends AudioWorkletNode {\n  constructor(\n    context: AudioContext,\n    { maxChannels, wasmBinary }: Readonly<RnnoiseProcessorOptions>\n  ) {\n    const workletOptions: RnnoiseWorkletOptions = {\n      processorOptions: { maxChannels, wasmBinary }\n    }\n    super(context, id, workletOptions)\n  }\n\n  destroy() {\n    this.port.postMessage('destroy')\n  }\n}\n","import { fetchArrayBuffer } from '../utils/fetchArrayBuffer'\n\ntype LoadSpeexOptions = {\n  /**\n   * url to wasm binary\n   */\n  url: string\n}\n\nexport const loadSpeex = async (\n  { url }: LoadSpeexOptions,\n  init?: RequestInit\n) => {\n  const binary = await fetchArrayBuffer(url, init)\n  return binary\n}\n","import type { TypedAudioWorkletOptions } from '../utils/TypedAudioWorklet'\nimport type { SpeexProcessorOptions } from './options'\n\nexport const id = '@sapphi-red/web-noise-suppressor/speex'\n\nexport type SpeexWorkletOptions =\n  TypedAudioWorkletOptions<SpeexProcessorOptions>\n","import type { SpeexProcessorOptions } from './options'\nimport { id, type SpeexWorkletOptions } from './workletUtil'\n\nexport class SpeexWorkletNode extends AudioWorkletNode {\n  constructor(\n    context: AudioContext,\n    { maxChannels, wasmBinary }: Readonly<SpeexProcessorOptions>\n  ) {\n    const workletOptions: SpeexWorkletOptions = {\n      processorOptions: { maxChannels, wasmBinary }\n    }\n    super(context, id, workletOptions)\n  }\n\n  destroy() {\n    this.port.postMessage('destroy')\n  }\n}\n"],"mappings":";AAGO,IAAM,KAAK;;;ACAX,IAAM,uBAAN,cAAmC,iBAAiB;AAAA,EACzD,YACE,SACA;AAAA,IACE;AAAA,IACA,iBAAiB;AAAA,IACjB;AAAA,IACA;AAAA,EACF,GACA;AACA,UAAM,iBAA0C;AAAA,MAC9C,kBAAkB,EAAE,eAAe,gBAAgB,QAAQ,YAAY;AAAA,IACzE;AACA,UAAM,SAAS,IAAI,cAAc;AAAA,EACnC;AACF;;;AClBO,IAAu0D,OAAK,YAAS,YAAY,SAAS,IAAI,WAAW,CAAC,GAAE,IAAG,KAAI,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,EAAE,CAAC,CAAC;;;ACA38D,IAAM,mBAAmB,OAAO,KAAa,SAAuB;AACzE,QAAM,MAAM,MAAM,MAAM,KAAK,IAAI;AACjC,QAAM,SAAS,MAAM,IAAI,YAAY;AACrC,SAAO;AACT;;;ACUO,IAAM,cAAc,OACzB,EAAE,KAAK,QAAQ,GACf,SACG;AACH,QAAM,UAAW,MAAM,KAAK,IAAK,UAAU;AAC3C,QAAM,SAAS,MAAM,iBAAiB,SAAS,IAAI;AACnD,SAAO;AACT;;;AClBO,IAAMA,MAAK;;;ACGX,IAAM,qBAAN,cAAiC,iBAAiB;AAAA,EACvD,YACE,SACA,EAAE,aAAa,WAAW,GAC1B;AACA,UAAM,iBAAwC;AAAA,MAC5C,kBAAkB,EAAE,aAAa,WAAW;AAAA,IAC9C;AACA,UAAM,SAASC,KAAI,cAAc;AAAA,EACnC;AAAA,EAEA,UAAU;AACR,SAAK,KAAK,YAAY,SAAS;AAAA,EACjC;AACF;;;ACXO,IAAM,YAAY,OACvB,EAAE,IAAI,GACN,SACG;AACH,QAAM,SAAS,MAAM,iBAAiB,KAAK,IAAI;AAC/C,SAAO;AACT;;;ACZO,IAAMC,MAAK;;;ACAX,IAAM,mBAAN,cAA+B,iBAAiB;AAAA,EACrD,YACE,SACA,EAAE,aAAa,WAAW,GAC1B;AACA,UAAM,iBAAsC;AAAA,MAC1C,kBAAkB,EAAE,aAAa,WAAW;AAAA,IAC9C;AACA,UAAM,SAASC,KAAI,cAAc;AAAA,EACnC;AAAA,EAEA,UAAU;AACR,SAAK,KAAK,YAAY,SAAS;AAAA,EACjC;AACF;","names":["id","id","id","id"]}