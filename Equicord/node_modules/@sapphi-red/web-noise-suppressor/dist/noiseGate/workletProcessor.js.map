{"version":3,"sources":["../../src/utils/rms.ts","../../src/noiseGate/openCloseStateMachine.ts","../../src/noiseGate/processor.ts","../../src/noiseGate/workletUtil.ts","../../src/noiseGate/workletProcessor.ts"],"sourcesContent":["export const getRms = (arr: Float32Array) => {\n  let ave = 0\n  for (const n of arr) {\n    ave += n * n\n  }\n  return Math.sqrt(ave / arr.length)\n}\n\nexport const convertDbToRms = (db: number) => Math.pow(10, db / 20)\n","import { convertDbToRms } from '../utils/rms'\n\nconst States = {\n  CLOSED: 0,\n  OPEN: 1,\n  CLOSING: 2\n} as const\ntype States = (typeof States)[keyof typeof States]\n\nexport const createOpenCloseStateMachine = ({\n  openThreshold,\n  closeThreshold,\n  holdMs,\n  bufferMs\n}: {\n  openThreshold: number\n  closeThreshold: number\n  holdMs: number\n  bufferMs: number\n}) => {\n  const rmsOpenThreshold = convertDbToRms(openThreshold)\n  const rmsCloseThreshold = convertDbToRms(closeThreshold)\n  const hold = Math.ceil(holdMs / bufferMs)\n\n  let state: States = States.CLOSED\n  let held = 0\n\n  const next = (rms: number) => {\n    switch (state) {\n      case States.CLOSED:\n        if (rms > rmsOpenThreshold) {\n          state = States.OPEN\n        }\n        break\n      case States.OPEN:\n        if (rms < rmsCloseThreshold) {\n          state = States.CLOSING\n          held = 0\n        }\n        break\n      case States.CLOSING:\n        if (rms > rmsCloseThreshold) {\n          state = States.OPEN\n        } else if (held > hold) {\n          state = States.CLOSED\n        } else {\n          held++\n        }\n        break\n      default: {\n        const exhaustiveCheck: never = state\n        console.error(`Unknown state: ${exhaustiveCheck}`)\n      }\n    }\n  }\n  const isOpen = () => state === States.OPEN || state === States.CLOSING\n\n  return { next, isOpen }\n}\n","import type { Process } from '../utils/process'\nimport { getRms } from '../utils/rms'\nimport { createOpenCloseStateMachine } from './openCloseStateMachine'\nimport type { NoiseGateProcessorOptions } from './options'\n\nexport const createProcessor = (\n  {\n    openThreshold,\n    closeThreshold,\n    holdMs,\n    maxChannels\n  }: Required<NoiseGateProcessorOptions>,\n  bufferMs: number\n) => {\n  const openCloseStateMachine = createOpenCloseStateMachine({\n    openThreshold,\n    closeThreshold,\n    holdMs,\n    bufferMs\n  })\n\n  const process: Process = (input, output) => {\n    const channels = Math.min(input.length, maxChannels)\n\n    let inputAverage = 0\n    for (let i = 0; i < channels; i++) {\n      inputAverage += getRms(input[i]!) / channels\n    }\n\n    openCloseStateMachine.next(inputAverage)\n\n    if (openCloseStateMachine.isOpen()) {\n      for (let i = 0; i < channels; i++) {\n        output[i]!.set(input[i]!)\n      }\n    }\n  }\n\n  return { process }\n}\n","import type { TypedAudioWorkletOptions } from '../utils/TypedAudioWorklet'\nimport type { NoiseGateProcessorOptions } from './options'\n\nexport const id = '@sapphi-red/web-noise-suppressor/noise-gate'\n\nexport type NoiseGateWorkletOptions = TypedAudioWorkletOptions<\n  Required<NoiseGateProcessorOptions>\n>\n","import type { Process } from '../utils/process'\nimport { createProcessor } from './processor'\nimport { id, type NoiseGateWorkletOptions } from './workletUtil'\n\nconst AudioWorkletBufferSize = 128\n\nclass NoiseGateWorkletProcessor extends AudioWorkletProcessor {\n  processor: { process: Process }\n\n  constructor(options: NoiseGateWorkletOptions) {\n    super()\n\n    const bufferMs = (1000 / sampleRate) * AudioWorkletBufferSize\n\n    this.processor = createProcessor(options.processorOptions, bufferMs)\n  }\n\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _parameters: unknown\n  ) {\n    if (inputs.length === 0 || !inputs[0] || inputs[0]?.length === 0) {\n      // no input connected\n      return true\n    }\n\n    this.processor.process(inputs[0]!, outputs[0]!)\n    return true\n  }\n}\n\nregisterProcessor(id, NoiseGateWorkletProcessor)\n"],"mappings":"AAAO,IAAMA,EAAUC,GAAsB,CAC3C,IAAIC,EAAM,EACV,QAAWC,KAAKF,EACdC,GAAOC,EAAIA,EAEb,OAAO,KAAK,KAAKD,EAAMD,EAAI,MAAM,CACnC,EAEaG,EAAkBC,GAAe,KAAK,IAAI,GAAIA,EAAK,EAAE,ECNlE,IAAMC,EAAS,CACb,OAAQ,EACR,KAAM,EACN,QAAS,CACX,EAGaC,EAA8B,CAAC,CAC1C,cAAAC,EACA,eAAAC,EACA,OAAAC,EACA,SAAAC,CACF,IAKM,CACJ,IAAMC,EAAmBC,EAAeL,CAAa,EAC/CM,EAAoBD,EAAeJ,CAAc,EACjDM,EAAO,KAAK,KAAKL,EAASC,CAAQ,EAEpCK,EAAgBV,EAAO,OACvBW,EAAO,EAgCX,MAAO,CAAE,KA9BKC,GAAgB,CAC5B,OAAQF,EAAO,CACb,KAAKV,EAAO,OACNY,EAAMN,IACRI,EAAQV,EAAO,MAEjB,MACF,KAAKA,EAAO,KACNY,EAAMJ,IACRE,EAAQV,EAAO,QACfW,EAAO,GAET,MACF,KAAKX,EAAO,QACNY,EAAMJ,EACRE,EAAQV,EAAO,KACNW,EAAOF,EAChBC,EAAQV,EAAO,OAEfW,IAEF,MACF,QAEE,QAAQ,MAAM,kBADiBD,CACgB,EAAE,CAErD,CACF,EAGe,OAFA,IAAMA,IAAUV,EAAO,MAAQU,IAAUV,EAAO,OAEzC,CACxB,ECrDO,IAAMa,EAAkB,CAC7B,CACE,cAAAC,EACA,eAAAC,EACA,OAAAC,EACA,YAAAC,CACF,EACAC,IACG,CACH,IAAMC,EAAwBC,EAA4B,CACxD,cAAAN,EACA,eAAAC,EACA,OAAAC,EACA,SAAAE,CACF,CAAC,EAmBD,MAAO,CAAE,QAjBgB,CAACG,EAAOC,IAAW,CAC1C,IAAMC,EAAW,KAAK,IAAIF,EAAM,OAAQJ,CAAW,EAE/CO,EAAe,EACnB,QAASC,EAAI,EAAGA,EAAIF,EAAUE,IAC5BD,GAAgBE,EAAOL,EAAMI,CAAC,CAAE,EAAIF,EAKtC,GAFAJ,EAAsB,KAAKK,CAAY,EAEnCL,EAAsB,OAAO,EAC/B,QAASM,EAAI,EAAGA,EAAIF,EAAUE,IAC5BH,EAAOG,CAAC,EAAG,IAAIJ,EAAMI,CAAC,CAAE,CAG9B,CAEiB,CACnB,ECpCO,IAAME,EAAK,8CCClB,IAAMC,EAAyB,IAEzBC,EAAN,cAAwC,qBAAsB,CAG5D,YAAYC,EAAkC,CAC5C,MAAM,EAEN,IAAMC,EAAY,IAAO,WAAcH,EAEvC,KAAK,UAAYI,EAAgBF,EAAQ,iBAAkBC,CAAQ,CACrE,CAEA,QACEE,EACAC,EAEAC,EACA,CACA,OAAIF,EAAO,SAAW,GAAK,CAACA,EAAO,CAAC,GAAKA,EAAO,CAAC,GAAG,SAAW,GAK/D,KAAK,UAAU,QAAQA,EAAO,CAAC,EAAIC,EAAQ,CAAC,CAAE,EACvC,EACT,CACF,EAEA,kBAAkBE,EAAIP,CAAyB","names":["getRms","arr","ave","n","convertDbToRms","db","States","createOpenCloseStateMachine","openThreshold","closeThreshold","holdMs","bufferMs","rmsOpenThreshold","convertDbToRms","rmsCloseThreshold","hold","state","held","rms","createProcessor","openThreshold","closeThreshold","holdMs","maxChannels","bufferMs","openCloseStateMachine","createOpenCloseStateMachine","input","output","channels","inputAverage","i","getRms","id","AudioWorkletBufferSize","NoiseGateWorkletProcessor","options","bufferMs","createProcessor","inputs","outputs","_parameters","id"]}